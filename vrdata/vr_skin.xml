<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Default Point Spot Style -->
  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         crop="0|0|64|64"
         rotate="50"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onover="onoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"


         />

  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>

  <action name="onoverIconDefaultPointSpotStyle">


pauseautorotation(forcehotspot);

  </action>

  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();


resumeautorotation(forcehotspot);

  </action>



  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Simple Button -->
<!-- id : button -->
<!-- ********** -->
  <!-- EMPTY BUTTON : no image file -->
<!-- ********** -->
<!-- Simple Button For a single pano -->
<!-- id : buttonForASinglePano -->
<!-- ********** -->
  <!-- EMPTY BUTTON : no image file -->

<!-- ********** -->
<!-- WebVR Button -->
<!-- id : webvrbutton -->
<!-- ********** -->

	<layer name="webvrbutton"
		keep="true"
		blocked="false"
		alpha="1"
		url="%FIRSTXML%/graphics/webvrbutton/btn_webvr.png" 
		align="topright"
		x="10"
		y="10"
		zorder="3"
		visible="false"
		onclick="if(scene[get(xml.scene)].full360,
    js(accessWebVr(get(xml.scene),get(tour_language)));
,
    js(accessWebVr(null,get(tour_language)));
);"
		tooltip="webvrbuttontooltip"
		onhover="showTooltip('plugin');"
		onout="hideTooltip();"

		width="50"
		height="prop"
		crop="0|0|100|63"
		/>

	<events name="webvrbuttonevents"
		onvrunavailable="hidewebvrbutton(true);"
		onTourStart="showwebvrbutton();"
		hidetourcontrols="hidewebvrbutton();" 
		showtourcontrols="showwebvrbutton();" 
		keep="true" />
	<action name="hidewebvrbutton">if(%1 == true,set(layer[webvrbutton].blocked, true););set(layer[webvrbutton].visible, false);</action>
	<action name="showwebvrbutton">if(tour_displaycontrols,if(layer[webvrbutton].blocked == false,set(layer[webvrbutton].visible, true););,hidewebvrbutton(););</action>


<!-- ********** -->
<!-- Social Button -->
<!-- id : socialButton -->
<!-- ********** -->

<ptplugin name="socialButton" engine="kolorSocial">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="margin_x" value="20" type="int" />
		<option name="margin_y" value="100" type="int" />
		
		<option name="source" value="facebook" type="string" />
		
		<option name="data_href" value="" type="string" />

		<option name="data_action" value="like" type="string" />
		<option name="data_appid" value="" type="string" />
		<option name="data_ref" value="" type="string" />
		<option name="data_share" value="false" type="bool" />
		<option name="data_layout" value="button" type="string" />
		<option name="zorder" value="4" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorSocialJsReady_socialButton">
	set(ptplugin[socialButton].jsready, true);
</action>

<action name="showKolorSocial_socialButton">
	ifnot(ptplugin[socialButton].isOpen,
		stopdelayedcall(delay_socialButton);
		set(ptplugin[socialButton].isOpen, true);
		js(openKolorSocial(socialButton));
	,
		if(ptplugin[socialButton].jsready,
			stopdelayedcall(delay_socialButton);
			js(invokePluginFunction(socialButton, showKolorSocial));
		,
			delayedcall(delay_socialButton, 0.1, showKolorSocial_socialButton(););
		);
	);
</action>

<action name="hideKolorSocial_socialButton">
	if(ptplugin[socialButton].jsready,
		stopdelayedcall(delay_socialButton);
		js(invokePluginFunction(socialButton, hideKolorSocial));
	,
		delayedcall(delay_socialButton, 0.1, hideKolorSocial_socialButton(););
	);
</action>


<events name="kolorSocialEvents_socialButton" 
	keep="true"


	onTourStart="showKolorSocial_socialButton();"

/>

<!-- ********** -->
<!-- Logo CrowdHackathon -->
<!-- id : logo -->
<!-- ********** -->

  <layer align="topleft"
         x="10"
         y="10"
         zorder="5"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logotooltipText"
			onhover="showTooltip('plugin');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logo.png" 
         onclick="
getmessage(urltoopen,logowebsiteurl);openurl(get(urltoopen),_blank);
"

         height="70"
         width="70"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>




<!-- ********** -->
<!-- Title of pano -->
<!-- id : title -->
<!-- ********** -->

  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    onnewpano="updatetitle();"
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    updatetitle();
  </action>

  <action name="updatetitle">
    getmessage(layer[title].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title].html);
  </action>
  <layer name="title" keep="true" zorder="6"
         type="text"
         align="top" x="0" y="10" width="100%"
         bg="false" capture="false" handcursor="false" interactivecontent="false" enabled="false"
         bgborder="0"
         alpha="1"
         visible="false"
         css="text-align:center;
              color:#000000;
              font-family:Times New Roman;
              font-size:16px;"/>

<!-- ********** -->
<!-- Description of tour -->
<!-- id : description -->
<!-- ********** -->

<ptplugin name="description" canStart="false" newPano="false" openatstart="false" mode="panorama" startMethod="showDescription_description" engine="kolorArea">
	<settings>
		<option name="position" value="bottom" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="10" type="int" />
		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="padding" value="15" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="descriptiondisplay_close_text" type="string" />

		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="area_width" value="20" type="int" />
		<option name="area_height" value="100" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="refresh_content" value="true" type="bool" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_description')" type="string" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="close_onclick_callback" value="invokeKrFunction('closeKolorAreaCallbackClick_description')" type="string" />
		<option name="zorder" value="7" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorAreaJsReady_description">
	set(ptplugin[description].jsready, true);

</action>


<action name="openKolorArea_description">
	ifnot(ptplugin[description].isOpen,
		set(ptplugin[description].isOpen, true);
		pauseautorotation(forceplugin);

		js(showKolorArea(description, get(ptplugin[description].descID)));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="closeKolorArea_description">
	if(ptplugin[description].isOpen,
		js(invokePluginFunction(description, closeKolorArea));
	);
</action>

<action name="toggleKolorArea_description">
	if(ptplugin[description].isOpen,
		closeKolorArea_description();
	,
		openKolorArea_description();
	);
</action>

<action name="closeKolorAreaCallback_description">
	if(ptplugin[description].isOpen,resumeautorotation(forceplugin);

		
	);
	set(ptplugin[description].isOpen, false);
	if(tour_displayinfo,hideTourInfo();

	);
</action>

<action name="closeKolorAreaCallbackClick_description">


	if(tour_displayinfo,hideTourInfo();

	);
</action>


<action name="showKolorArea_description">
	ifnot(ptplugin[description].startMethod == "",
		delayedcall(0,get(ptplugin[description].startMethod));
	,
		set(ptplugin[description].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(description, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	);
</action>
	
<action name="hideKolorArea_description">
	resumeautorotation(forceplugin);

	
	set(ptplugin[description].isOpen, false);
	js(invokePluginFunction(description, hideKolorArea, %1));
</action>

<action name="openDescription_description">
	openKolorArea_description();
</action>

<action name="openSpotDescription_description">
	set(ptplugin[description].descID, %1);
	openKolorArea_description();
</action>

<action name="closeDescription_description">
	set(ptplugin[description].currentGroup, false);
	if(%1,
		set(restore_description, true);
	,
		set(restore_description, false);
	);
	closeKolorArea_description();
</action> 

<action name="showDescription_description">
	if(ptplugin[description].canStart,
		set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
		if(ptplugin[description].descID == null,
			set(ptplugin[description].descID, "");
		);
		if(ptplugin[description].descID != "",
			openDescription_description();
		,
			hideKolorArea_description(false);
		);
		set(ptplugin[description].startMethod, "");
	);
</action>


<action name="refreshPanoDescription_description">
	set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
	if(ptplugin[description].descID == null,
		set(ptplugin[description].descID, "");
	);
	if(ptplugin[description].descID != "",
		if(ptplugin[description].isOpen,
			js(invokePluginFunction(description, updateKolorArea, get(ptplugin[description].descID)));
		,
			if(restore_description,
				showDescription_description();
			);
		);
	,
		if(tour_displayinfo,
			delayedcall(0.1,showTourInfo();
);
		);
		closeDescription_description(get(ptplugin[description].isOpen));
	);
</action>

<action name="onNewPano_description">
	if(ptplugin[description].newPano,
		if(ptplugin[description].startMethod == "",
			if(ptplugin[description].isOpen,
				refreshPanoDescription_description();
			,
				if(tour_displayinfo,
				showDescription_description();
				,
				refreshPanoDescription_description();
				);
			);
		);
	);
	set(ptplugin[description].newPano, true);
</action>

<action name="changeLanguage_description">
	if(ptplugin[description].jsready,
		stopdelayedcall(delay_description);
		js(invokePluginFunction(description, changeLanguage, true));
	,
		delayedcall(delay_description, 0.1, changeLanguage_description(););
	);
</action>

<events name="kolorAreaEvents_description" 
	keep="true"
	onTourStart="set(ptplugin[description].canStart, true);if(ptplugin[description].openatstart,showTourInfo();
);"
	onshowtourinfo="if(tour_displayinfo,showDescription_description(););"
	onhidetourinfo="if(ptplugin[description].isOpen,closeDescription_description(false););"
	onnewpano="onNewPano_description();"
	changetourlanguage="changeLanguage_description();"
/>

<!-- ********** -->
<!-- PanotourMaps -->
<!-- id : panotourmaps -->
<!-- ********** -->

		<ptplugin name="panotourmaps" lat="45.478595" lng="6.03104" zoom="11" maptypelayer="road" openatstart="false" state="false" bgcolor="f2f2f2" zorder="8" centeronspots="true" engine="KolorMap">
	
		<radar visible="true" radius="8000" linktozoom="true" quality="8" linecolor="ffffff" lineopacity="0.50000762951094835" linewidth="1" fillcolor="ffffff" fillopacity="0.30000762951094834" />
		
		<markers animation="bounce" />
		
		
		<controls zoom="true" pan="true" scale="false" maptype="true" overview="true">
			<ui draggable="true" scrollable="true" dblclick="true" />
			<specific />
		</controls>
		
		<markerSelected name="" heading="" fov="" />
		
		
		


		
	</ptplugin>
	
	<action name="kolorMapJsReady_panotourmaps">
		set(ptplugin[panotourmaps].jsready, true);
	</action>
	
	<ptplugin name="panotourmapsArea" engine="kolorArea">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="panotourmapsmap_title" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="panotourmapsdisplay_close_text" type="string" />

		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="area_width" value="20" type="int" />
		<option name="area_height" value="100" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorMap('panotourmaps', [['googlev3','AIzaSyBn1KRbiLTdrB3f-EQ1PFF6q0WgVH4MQtY']], 'panotourmapsArea_mapDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_panotourmapsArea')" type="string" />
		<option name="zorder" value="8" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_panotourmapsArea">
		set(ptplugin[panotourmapsArea].jsready, true);

	</action>
	
	<action name="openKolorArea_panotourmapsArea">
		ifnot(ptplugin[panotourmapsArea].isOpen,
			set(ptplugin[panotourmapsArea].isOpen, true);
			pauseautorotation(forceplugin);

			js(showKolorArea(panotourmapsArea, &lt;div id="panotourmapsArea_mapDIV"&gt;&lt;/div&gt;));
			js(invokePluginFunction(panotourmaps, forceResizeMapLayer, panotourmapsArea_mapDIV));
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea_panotourmapsArea">
		if(ptplugin[panotourmapsArea].isOpen,
			js(invokePluginFunction(panotourmapsArea, closeKolorArea));
		);
	</action>
	
	<action name="toggleKolorArea_panotourmapsArea">
		if(ptplugin[panotourmapsArea].isOpen,
			closeKolorArea_panotourmapsArea();
		,
			openKolorArea_panotourmapsArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_panotourmapsArea">
		if(ptplugin[panotourmapsArea].isOpen,resumeautorotation(forceplugin);

			
		);
		set(ptplugin[panotourmapsArea].isOpen, false);hideMap();

	</action>
	
	<action name="showKolorArea_panotourmapsArea">
		set(ptplugin[panotourmapsArea].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(panotourmapsArea, showKolorArea, %1));
		js(invokePluginFunction(panotourmaps, forceResizeMapLayer, panotourmapsArea_mapDIV));
		events.dispatch(onremovedisplayedobject);
	</action> 
		
	<action name="hideKolorArea_panotourmapsArea">
		resumeautorotation(forceplugin);

		
		set(ptplugin[panotourmapsArea].isOpen, false);
		js(invokePluginFunction(panotourmapsArea, hideKolorArea, %1));
	</action>
	
	
	<action name="updateDefaultMarkerValues_panotourmapsArea">
		if( ptplugin[panotourmaps].markerSelected.name != "",
			set(ptplugin[panotourmaps].markerSelected.heading, get(view.hlookat));
			set(ptplugin[panotourmaps].markerSelected.fov, get(view.hfov));
		);
		
	</action>
	
	<action name="changeLanguage_panotourmaps">
		if(ptplugin[panotourmaps].jsready,
			stopdelayedcall(delay_panotourmaps);
			js(invokePluginFunction(panotourmapsArea, changeLanguage, false));
		,
			delayedcall(delay_panotourmaps, 0.1, changeLanguage_panotourmaps(););
		);
	</action>
	
	<events name="kolorAreaEvents_panotourmapsArea" 
		keep="true"
		onhidetourmap="panotourmapsClosetourmap();" 
		onshowtourmap="if(tour_displaymap,panotourmapsOpentourmap(););" 
		
		onTourStart="updateDefaultMarkerValues_panotourmapsArea();"
		changetourlanguage="changeLanguage_panotourmaps();"
	/>
	
	
	


	
	
	
	<!-- Begin PanotourMaps events and actions -->
	<events name="panotourmapsEvents" 
	onxmlcomplete="ifnot(panotourmapsMapLoaded,set(tour_displaymap,false););" 
	onnewpano="panotourmapsActivateDefaultMarker();" 
	onviewchanged="panotourmapsOnviewchange()" 
	keep="true" />
	
	
	<krpano panotourmapsMarkerDefaultSet="false" />
	<krpano panotourmapsMapLoaded="false" />
	
	
	
	<action name="panotourmapsClosetourmap">
		if(ptplugin[panotourmapsArea].isOpen,
			closeKolorArea_panotourmapsArea();
		);
	</action>
	
	<action name="panotourmapsHidetourmap">
		ifnot(ptplugin[panotourmapsArea].isOpen,
			panotourmapsClosetourmap();
		,
			hideKolorArea_panotourmapsArea(false);
		);
	</action>
	
	<action name="panotourmapsOpentourmap">
		ifnot(ptplugin[panotourmapsArea].isOpen,
			openKolorArea_panotourmapsArea();
		);
	</action>
	
	<action name="panotourmapsShowtourmap">
		ifnot(ptplugin[panotourmapsArea].isOpen,
			panotourmapsOpentourmap();
		,
			showKolorArea_panotourmapsArea(false);
		);
	</action>
	
	<action name="panotourmapsChangescene">
		mainloadscene(%1);if(xml.scene != %1,panotourmapsGoMarker(%2););
	</action>
	
	<action name="panotourmapsOnviewchange">
		if ( panotourmapsMapLoaded == true,
			ifnot(ptplugin[panotourmaps].markerSelected.name == "",
				js(invokePluginFunction(panotourmaps, changeDirection, get(view.hlookat), get(view.hfov)));
			);
			updateDefaultMarkerValues_panotourmapsArea();
		);
	</action>
	
	<action name="panotourmapsGoMarker">
		if ( panotourmapsMapLoaded == true,
			
			set(ptplugin[panotourmaps].markerSelected.name, %1);
			set(ptplugin[panotourmaps].markerSelected.heading, get(view.hlookat));
			set(ptplugin[panotourmaps].markerSelected.fov, get(view.hfov));
			js(invokePluginFunction(panotourmaps, changeCurrentMarker, %1, get(view.hlookat), get(view.hfov), get(ptplugin[panotourmaps].centeronspots)));
			
			if( panotourmapsMarkerDefaultSet == false,
				js(setMapDefaultMarker(panotourmaps, %1, get(view.hlookat), get(view.hfov)));
				set(panotourmapsMarkerDefaultSet,true);
			);
		);
	</action>
	
	<action name="panotourmapsUnselectMarker">
		set(ptplugin[panotourmaps].markerSelected.name, "");
		js(invokePluginFunction(panotourmaps, unselectCurrentMarker));
		
		js(setMapDefaultMarker(panotourmaps, null, null, null));
	</action>

	<action name="panotourmapsActivateDefaultMarker">
		set(panotourmapsMapLoaded, true);
		
		set(panotourmapsMapSpotFound, false);
		for(set(defaultmarkerinc,0), defaultmarkerinc LT ptplugin[panotourmaps].marker.count , inc(defaultmarkerinc),
                        if(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].isscene == true,
				if(panotourmapsMapSpotFound == false,
					if(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].scene == xml.scene,
						ifnot(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].name == ptplugin[panotourmaps].markerSelected.name,
							panotourmapsGoMarker(get(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].name));
						);
						set(panotourmapsMapSpotFound, true);
					);
				);
			);
		);
		
		if(panotourmapsMapSpotFound == false,
			panotourmapsUnselectMarker();
		);
	</action>



<!-- ********** -->
<!-- Floor plan Control Bar1 -->
<!-- id : YachtControlBar1 -->
<!-- ********** -->

  <krpano YachtControlBar1barbuilt="false" YachtControlBar1backgroundwidthwhenclosed="0" YachtControlBar1backgroundwidthwhenopened="0" YachtControlBar1IsOpened="false" />
  <events name="YachtControlBar1events" 
    onxmlcomplete="YachtControlBar1buildMenuBar();" 


    keep="true" />



  <action name="YachtControlBar1buildMenuBar">
    ifnot (YachtControlBar1barbuilt, YachtControlBar1buildMenu(); set(YachtControlBar1barbuilt, true););
  </action>

  <style name="YachtControlBar1_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', YachtControlBar1menuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />
  <style name="YachtControlBar1_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', YachtControlBar1menuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

  <layer name="YachtControlBar1_menu_bg"
         keep="true"
         type="container"
         zorder="9"
         width="40"
         height="40"
         align="bottom"
         x="0" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >





    <layer name="YachtControlBar1btn_display_floorplan"
            url="%FIRSTXML%/graphics/yacht control bar1/btn_floorplan.png"
            onclick="showFloorplan();
"
            style="YachtControlBar1_btn_style"
            visible="false"
            tooltip="YachtControlBar1displayFloorplanTip"
            />
    <layer name="YachtControlBar1btn_hide_floorplan"
            url="%FIRSTXML%/graphics/yacht control bar1/btn_floorplan.png"
            onclick="hideFloorplan();
"
            style="YachtControlBar1_btn_style"
            visible="false"
            tooltip="YachtControlBar1hideFloorplanTip"
            />






 </layer>






  <action name="YachtControlBar1hideMenuControls">
    set(YachtControlBar1IsOpened, false);







	YachtControlBar1updateFloorplanButtons();



	set(layer[YachtControlBar1_menu_bg].width, get(YachtControlBar1backgroundwidthwhenclosed));

	set(layer[YachtControlBar1_menu_bg].visible, true);
  </action>
  <action name="YachtControlBar1showMenuControls">
    set(YachtControlBar1IsOpened, true);
	set(layer[YachtControlBar1_menu_bg].visible, true);







	YachtControlBar1updateFloorplanButtons();


    set(layer[YachtControlBar1_menu_bg].width, get(YachtControlBar1backgroundwidthwhenopened));
  </action>


	<events name="YachtControlBar1DisplayFloorPlanEvents" 
		onshowtourfloorplan="YachtControlBar1updateFloorplanButtons();" 
		onhidetourfloorplan="YachtControlBar1updateFloorplanButtons();" 
		keep="true" />
	<action name="YachtControlBar1HideFloorplanButtons">
		set(layer[YachtControlBar1btn_display_floorplan].visible, false);
		set(layer[YachtControlBar1btn_hide_floorplan].visible, false);
	</action>
	<action name="YachtControlBar1ShowFloorplanButtons">
		if (tour_displayfloorplan,
			set(layer[YachtControlBar1btn_hide_floorplan].visible, true);
			set(layer[YachtControlBar1btn_display_floorplan].visible, false);
		,
			set(layer[YachtControlBar1btn_display_floorplan].visible, true);
			set(layer[YachtControlBar1btn_hide_floorplan].visible, false);
		);
	</action>
	<action name="YachtControlBar1updateFloorplanButtons">
		if (YachtControlBar1IsOpened,
			YachtControlBar1ShowFloorplanButtons();
		,
			YachtControlBar1HideFloorplanButtons();
		);
	</action>





<layer name="YachtControlBar1menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="bottom"
/>
  <action name="YachtControlBar1buildMenu">
    
    set(YachtControlBar1button_pos, 0);




      set(layer[YachtControlBar1btn_display_floorplan].x , get(YachtControlBar1button_pos));
      set(layer[YachtControlBar1btn_hide_floorplan].x    , get(YachtControlBar1button_pos));
      inc(YachtControlBar1button_pos, 45);










      dec(YachtControlBar1button_pos, 5);

      set(YachtControlBar1backgroundwidthwhenopened, get(YachtControlBar1button_pos));


    
      set(layer[YachtControlBar1_menu_bg].width, get(YachtControlBar1backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="YachtControlBar1StartTourEvents" onTourStart="YachtControlBar1CallOnStartTour();" keep="true" />
	
	<action name="YachtControlBar1CallOnStartTour">
		
		YachtControlBar1showMenuControls();
	</action>



<!-- ********** -->
<!-- Previous/Next Dots -->
<!-- id : prevnexttheme8 -->
<!-- ********** -->

  <style name="prevnexttheme8ArrowStyle" keep="true" x="10" alpha="0.5"
               crop="0| 0|38|38"
         onovercrop="0|38|38|38"
         ondowncrop="0|76|38|38"
         />
  <layer name="prevnexttheme8prevPanoramaArrow" style="prevnexttheme8ArrowStyle"
         url="%FIRSTXML%/graphics/prevnextdots/btn_scroll_left.png" align="left" 
         tooltip="prevnexttheme8prevSceneTip"
         onhover="set(alpha, 1);showTooltip('plugin',prevnexttheme8TooltipStyle,left);"
         onout="set(alpha, 0.5);hideTooltip();"
         onclick="loadPreviousScene();
"
         visible="false"
         zorder="10" />

  <layer name="prevnexttheme8nextPanoramaArrow" style="prevnexttheme8ArrowStyle"
         url="%FIRSTXML%/graphics/prevnextdots/btn_scroll_right.png" align="right"
         tooltip="prevnexttheme8nextSceneTip"
         onhover="set(alpha, 1);showTooltip('plugin',prevnexttheme8TooltipStyle,right);"
         onout="set(alpha, 0.5);hideTooltip();"
         onclick="loadNextScene();
"
         visible="false"
         zorder="10" />

  <events name="prevnexttheme8hideshowcontrolsevent" 
    onTourStart="prevnexttheme8showPrevNextControls();"
    keep="true"/>
  <action name="prevnexttheme8hidePrevNextControls">
    set(layer[prevnexttheme8prevPanoramaArrow].visible, false);
    set(layer[prevnexttheme8nextPanoramaArrow].visible, false);
  </action>
  <action name="prevnexttheme8showPrevNextControls">
    set(layer[prevnexttheme8prevPanoramaArrow].visible, true);
    set(layer[prevnexttheme8nextPanoramaArrow].visible, true);
  </action>

<layer name="prevnexttheme8TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	css="color:#ffffff;font-family:Arial;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
/>

<!-- ********** -->
<!-- Floor plan -->
<!-- id : floorPlan -->
<!-- ********** -->

	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="2a2a2a" type="string" />
			<option name="background_lighter_color" value="323232" type="string" />
			<option name="background_darker_color" value="232323" type="string" />
			<option name="background_alpha" value="0.66666666666666663" type="float" />
			<option name="text_color" value="000000" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="one" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="true" type="bool" />
			<option name="title" value="project_floor_title" type="string" />
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="false" type="bool" />
			<option name="close_on_click" value="true" type="bool" />
			<option name="position" value="center" type="string" />
			<option name="zorder" value="11" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="fpitemmain" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
				
				<floorplanItem 
					name="fpitemmain" 
					width="1005" 
					height="542" 
					groupName="" 
					url="floorplan/planta_semrestaurante1.png" 
					title="project_floor_title"
					heading="0">
							<spot name="spotmap4139" posX="0.388807058" posY="0.327256143" heading="0" desc="spotmap4139_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4036" jsClick="spotmap4139ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4140" posX="0.387825221" posY="0.597082973" heading="0" desc="spotmap4140_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4039" jsClick="spotmap4140ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4141" posX="0.388316154" posY="0.660893321" heading="0" desc="spotmap4141_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4038" jsClick="spotmap4141ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4142" posX="0.47913599" posY="0.596171379" heading="0" desc="spotmap4142_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4041" jsClick="spotmap4142ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4143" posX="0.570937634" posY="0.443026423" heading="0" desc="spotmap4143_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4122" jsClick="spotmap4143ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4144" posX="0.591065288" posY="0.381039202" heading="0" desc="spotmap4144_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4037" jsClick="spotmap4144ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4145" posX="0.592538059" posY="0.506836832" heading="0" desc="spotmap4145_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4036" jsClick="spotmap4145ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4146" posX="0.655866444" posY="0.451230615" heading="0" desc="spotmap4146_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4035" jsClick="spotmap4146ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4147" posX="0.743249893" posY="0.494074762" heading="0" desc="spotmap4147_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4045" jsClick="spotmap4147ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap4148" posX="0.795287192" posY="0.492251605" heading="0" desc="spotmap4148_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano4042" jsClick="spotmap4148ActionSpotFloorPlan">
								<icon url="spots/hotspot_plan_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
				</floorplanItem>
			
			
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems.selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
		<!-- floorplan main spots counter : 10 -->
			<action name="spotmap4139ActionSpotFloorPlan">
            mainloadscene(get(panoramagroup[panogroup4049].mainscene));lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4140ActionSpotFloorPlan">
            mainloadscene(get(panoramagroup[panogroup4052].mainscene));lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4141ActionSpotFloorPlan">
            mainloadscene(get(panoramagroup[panogroup4051].mainscene));lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4142ActionSpotFloorPlan">
            mainloadscene(get(panoramagroup[panogroup4054].mainscene));lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4143ActionSpotFloorPlan">
          mainloadscene(pano4122);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4144ActionSpotFloorPlan">
          mainloadscene(pano4037);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4145ActionSpotFloorPlan">
          mainloadscene(pano4036);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4146ActionSpotFloorPlan">
          mainloadscene(pano4035);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4147ActionSpotFloorPlan">
          mainloadscene(pano4045);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
			<action name="spotmap4148ActionSpotFloorPlan">
          mainloadscene(pano4042);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
	
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,true););floorPlanActivateDefaultSpot();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart="floorPlanOpenTourFloorPlan();"
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlan, changeLanguage));
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(false);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems.selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems.selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems.selectedSpotFov, get(view.hfov));
		);
		
		
		if(ptplugin[floorPlanArea].isOpen,
			floorPlanSelectActivatedSpot(%1, %2, %3);
		);
	</action>
	
	<action name="floorPlanSelectActivatedSpot">
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems.selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems.floorplanItem.count , inc(defaultfloorplaniteminc),
                        if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[fpitemmain].name));
						set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[fpitemmain].name));
					);
				);
			);
			if(floorPlanSpotSearchActivated == true,
                                for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
                                        if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems.selectedItem, get(ptplugin[floorPlan].floorplanItems.floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems.selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems.selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems.selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="project_floor_title" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="2a2a2a" type="string" />
		<option name="background_alpha" value="0.66666666666666663" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="area_width" value="90" type="int" />
		<option name="area_height" value="90" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="11" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

		inc(tour_autorotation_openatstartplugin);
		set(ptplugin[floorPlanArea].autorotateBlocked, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			pauseautorotation(forceplugin);

			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			
			if(ptplugin[floorPlan].floorplanItems.selectedSpot != "",
				floorPlanSelectActivatedSpot(get(ptplugin[floorPlan].floorplanItems.selectedSpot), get(ptplugin[floorPlan].floorplanItems.selectedItem), get(ptplugin[floorPlan].floorplanItems.selectedSpotScene));
			);
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,resumeautorotation(forceplugin);

			if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		);
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		resumeautorotation(forceplugin);

		if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" 
		keep="true"
	/>
	

<!-- ********** -->
<!-- Full Screen Control Bar2 -->
<!-- id : YachtControlBar2 -->
<!-- ********** -->

  <krpano YachtControlBar2barbuilt="false" YachtControlBar2backgroundwidthwhenclosed="0" YachtControlBar2backgroundwidthwhenopened="0" YachtControlBar2IsOpened="false" />
  <events name="YachtControlBar2events" 
    onxmlcomplete="YachtControlBar2buildMenuBar();" 


    keep="true" />



  <action name="YachtControlBar2buildMenuBar">
    ifnot (YachtControlBar2barbuilt, YachtControlBar2buildMenu(); set(YachtControlBar2barbuilt, true););
  </action>

  <style name="YachtControlBar2_btn_style"
         keep="true"
         edge="bottom"
         align="bottom"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', YachtControlBar2menuTooltipStyle, right);"
         onout="hideTooltip();"
         />
  <style name="YachtControlBar2_btn_style_off"
         keep="true"
         edge="bottom"
         align="bottom"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', YachtControlBar2menuTooltipStyle, right);"
         onout="hideTooltip();"
         />

  <layer name="YachtControlBar2_menu_bg"
         keep="true"
         type="container"
         zorder="12"
         width="40"
         height="40"
         align="bottomright"
         x="20" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >






    <layer name="YachtControlBar2btn_openfs"
            url="%FIRSTXML%/graphics/yacht control bar2/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="YachtControlBar2_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="YachtControlBar2openFsTip"
            />
    <layer name="YachtControlBar2btn_closefs"
            url="%FIRSTXML%/graphics/yacht control bar2/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="YachtControlBar2_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="YachtControlBar2closeFsTip"
            />





 </layer>






  <action name="YachtControlBar2hideMenuControls">
    set(YachtControlBar2IsOpened, false);


	YachtControlBar2updateFullscreenButtons();








	set(layer[YachtControlBar2_menu_bg].height, get(YachtControlBar2backgroundwidthwhenclosed));

	set(layer[YachtControlBar2_menu_bg].visible, true);
  </action>
  <action name="YachtControlBar2showMenuControls">
    set(YachtControlBar2IsOpened, true);
	set(layer[YachtControlBar2_menu_bg].visible, true);


	YachtControlBar2updateFullscreenButtons();







    set(layer[YachtControlBar2_menu_bg].height, get(YachtControlBar2backgroundwidthwhenopened));
  </action>




  <events name="YachtControlBar2menufullscreenchangeevent"
          onenterfullscreen="YachtControlBar2updateFullscreenButtons();"
          onexitfullscreen="YachtControlBar2updateFullscreenButtons();"
          keep="true"/>
	<action name="YachtControlBar2HideFullscreenButtons">
		set(layer[YachtControlBar2btn_openfs].visible , false);
		set(layer[YachtControlBar2btn_closefs].visible, false);
	</action>
	<action name="YachtControlBar2ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[YachtControlBar2btn_openfs].visible , false);
				set(layer[YachtControlBar2btn_closefs].visible, true);
			,
				set(layer[YachtControlBar2btn_openfs].visible ,true);
				set(layer[YachtControlBar2btn_closefs].visible,false);
			);
		,
			YachtControlBar2HideFullscreenButtons();
		);
	</action>
	<action name="YachtControlBar2updateFullscreenButtons">
		if (YachtControlBar2IsOpened,
			YachtControlBar2ShowFullscreenButtons();
		,
			YachtControlBar2HideFullscreenButtons();
		);
	</action>



<layer name="YachtControlBar2menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="right"
/>
  <action name="YachtControlBar2buildMenu">
    
    set(YachtControlBar2button_pos, 0);



      if (device.fullscreensupport,
        set(layer[YachtControlBar2btn_openfs].y , get(YachtControlBar2button_pos));
        set(layer[YachtControlBar2btn_closefs].y, get(YachtControlBar2button_pos));
        inc(YachtControlBar2button_pos, 45);
      );











      dec(YachtControlBar2button_pos, 5);

      set(YachtControlBar2backgroundwidthwhenopened, get(YachtControlBar2button_pos));


    
      set(layer[YachtControlBar2_menu_bg].height, get(YachtControlBar2backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="YachtControlBar2StartTourEvents" onTourStart="YachtControlBar2CallOnStartTour();" keep="true" />
	
	<action name="YachtControlBar2CallOnStartTour">
		
		YachtControlBar2showMenuControls();
	</action>



<!-- ********** -->
<!-- google map control button -->
<!-- id : YachtControlBar3 -->
<!-- ********** -->

  <krpano YachtControlBar3barbuilt="false" YachtControlBar3backgroundwidthwhenclosed="0" YachtControlBar3backgroundwidthwhenopened="0" YachtControlBar3IsOpened="false" />
  <events name="YachtControlBar3events" 
    onxmlcomplete="YachtControlBar3buildMenuBar();" 


    keep="true" />



  <action name="YachtControlBar3buildMenuBar">
    ifnot (YachtControlBar3barbuilt, YachtControlBar3buildMenu(); set(YachtControlBar3barbuilt, true););
  </action>

  <style name="YachtControlBar3_btn_style"
         keep="true"
         edge="bottom"
         align="bottom"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', YachtControlBar3menuTooltipStyle, left);"
         onout="hideTooltip();"
         />
  <style name="YachtControlBar3_btn_style_off"
         keep="true"
         edge="bottom"
         align="bottom"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', YachtControlBar3menuTooltipStyle, left);"
         onout="hideTooltip();"
         />

  <layer name="YachtControlBar3_menu_bg"
         keep="true"
         type="container"
         zorder="13"
         width="40"
         height="40"
         align="bottomleft"
         x="20" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >





    <layer name="YachtControlBar3btn_display_map"
            url="%FIRSTXML%/graphics/yacht control bar3/btn_map.png"
            onclick="YachtControlBar3displayMap();"
            style="YachtControlBar3_btn_style"
            visible="false"
            tooltip="YachtControlBar3displayMapTip"
            />
    <layer name="YachtControlBar3btn_hide_map"
            url="%FIRSTXML%/graphics/yacht control bar3/btn_map.png"
            onclick="YachtControlBar3hideMap();"
            style="YachtControlBar3_btn_style"
            visible="false"
            tooltip="YachtControlBar3hideMapTip"
            />






 </layer>






  <action name="YachtControlBar3hideMenuControls">
    set(YachtControlBar3IsOpened, false);







	YachtControlBar3updateMapButtons();



	set(layer[YachtControlBar3_menu_bg].height, get(YachtControlBar3backgroundwidthwhenclosed));

	set(layer[YachtControlBar3_menu_bg].visible, true);
  </action>
  <action name="YachtControlBar3showMenuControls">
    set(YachtControlBar3IsOpened, true);
	set(layer[YachtControlBar3_menu_bg].visible, true);







	YachtControlBar3updateMapButtons();


    set(layer[YachtControlBar3_menu_bg].height, get(YachtControlBar3backgroundwidthwhenopened));
  </action>


  <action name="YachtControlBar3displayMap">showMap();

  </action>
  <action name="YachtControlBar3hideMap">hideMap();

  </action>
  
  <events name="YachtControlBar3displaymapchangeevent"
          onshowtourmap="YachtControlBar3updateMapButtons();"
          onhidetourmap="YachtControlBar3updateMapButtons();"
          keep="true"/>
	<action name="YachtControlBar3HideMapButtons">
		set(layer[YachtControlBar3btn_display_map].visible, false);
		set(layer[YachtControlBar3btn_hide_map].visible, false);
	</action>
	<action name="YachtControlBar3ShowMapButtons">
		if (tour_displaymap,
			set(layer[YachtControlBar3btn_hide_map].visible, true);
			set(layer[YachtControlBar3btn_display_map].visible, false);
		,
			set(layer[YachtControlBar3btn_display_map].visible, true);
			set(layer[YachtControlBar3btn_hide_map].visible, false);
		);
	</action>
	<action name="YachtControlBar3updateMapButtons">
		if (YachtControlBar3IsOpened,
			YachtControlBar3ShowMapButtons();
		,
			YachtControlBar3HideMapButtons();
		);
	</action>





<layer name="YachtControlBar3menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="left"
/>
  <action name="YachtControlBar3buildMenu">
    
    set(YachtControlBar3button_pos, 0);




      set(layer[YachtControlBar3btn_display_map].y , get(YachtControlBar3button_pos));
      set(layer[YachtControlBar3btn_hide_map].y    , get(YachtControlBar3button_pos));
      inc(YachtControlBar3button_pos, 45);










      dec(YachtControlBar3button_pos, 5);

      set(YachtControlBar3backgroundwidthwhenopened, get(YachtControlBar3button_pos));


    
      set(layer[YachtControlBar3_menu_bg].height, get(YachtControlBar3backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="YachtControlBar3StartTourEvents" onTourStart="YachtControlBar3CallOnStartTour();" keep="true" />
	
	<action name="YachtControlBar3CallOnStartTour">
		
		YachtControlBar3showMenuControls();
	</action>



  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


  <!-- MAP -->
  <action name="hideMap">set(tour_displaymap, false);events.dispatch(onhidetourmap);</action>
  <action name="showMap">set(tour_displaymap, true); events.dispatch(onshowtourmap);</action>

  <!-- Tour Information -->
  <action name="hideTourInfo">set(tour_displayinfo, false);events.dispatch(onhidetourinfo);</action>
  <action name="showTourInfo">set(tour_displayinfo, true); events.dispatch(onshowtourinfo);</action>


	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="true"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

</krpano>